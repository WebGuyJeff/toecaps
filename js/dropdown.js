/**
 * Toecaps Dropdown Menu Javascript
 *
 * A function to hide the header and reveal by button click. Mainly for use on
 * landing pages where the main header isn't required.
 * 
 * @package Toecaps
 * @author Jefferson Real <me@jeffersonreal.uk>
 * @copyright Copyright (c) 2022, Jefferson Real
 */

const dropdownPlugin = (function() {

	/**
	 * Abort controller for page click listeners generated by the dropdown toggling.
	 * This method is 1000x more robust than removeEventListener.
	 */
	const pageClickController = new AbortController();

    /**
     * Attach event listener to buttons in the loaded doc.
     */
    function initDropdowns() {

		// Attach click handler to document.
//		document.addEventListener(
//			'click',
//			dropdownPlugin.pageClickHandler(),
//			{ signal: pageClickController.signal } // Nuke: pageClickController.abort();
//		);

		// Attach hover handlers to dropdowns.
		let hoverDropdowns = document.querySelectorAll( '.dropdown-hover:not( .fullscreenMenu .dropdown )' );
		[ ...hoverDropdowns ].forEach( dropdown => {

			dropdownPlugin.registerHover( dropdown );
        } );

		// Attach click handlers to dropdown buttons.
        let buttons = document.getElementsByClassName( 'dropdown_toggle' );
        [ ...buttons ].forEach( button => {
            button.addEventListener( 'click', buttonClicked = function() {
				dropdownPlugin.buttonClickHandler( this );
            } );
        } );

		let dropdowns = document.getElementsByClassName( 'dropdown' );
		[ ...dropdowns ].forEach( dropdown => {

			// Attach click handlers to dropdowns.
			dropdown.addEventListener( 'click', dropdownClicked = function() {
				dropdownPlugin.dropdownClickHandler( this );

			} );

			// Attach focusout handlers to dropdowns.
			dropdown.addEventListener( 'focusout', dropdownFocusout = function() {
				dropdownPlugin.focusOutHandler( this );
			} );

		} );

    }

    /**
     * Call init function on document ready.
     */
    let docLoaded = setInterval( function() {

        if( document.readyState === 'complete' ) {
            clearInterval( docLoaded );
            initDropdowns();
        }
    }, 100);


    /**
     * Check if passed elem is in left half of viewport.
     */
    function isInLeftHalf( button ) {

        const dims = button.getBoundingClientRect();
        viewportWidth = window.innerWidth;

        return (
            dims.left <= viewportWidth / 2
        );
    }


    /**
     * Check if passed elem is overflowing viewport bottom and scroll window if needed.
     */
    function scrollIntoView( menu ) {
        const menuStyles = menu.getBoundingClientRect();
		const bodyStyles = document.body.getBoundingClientRect();
        viewportHeight   = window.innerHeight;

		if ( menuStyles.bottom > viewportHeight ) {
			const scrollDistance = menuStyles.bottom - viewportHeight;
			window.scrollBy( 0, scrollDistance ); // x,y

			if ( menuStyles.bottom > bodyStyles.bottom ) {
				document.body.style.height = document.documentElement.scrollHeight + scrollDistance + 'px';
			}

		} else {
			return false;
		}
    }


    return { // Public functions.


        /**
         * Handle dropdown losing focus events.
         */
		focusOutHandler: function( dropdown ) {


console.log( dropdown );
console.log( 'focusOutHandler: ' + dropdown.firstElementChild.innerText);


dropdownPlugin.close( dropdown.querySelector( '.dropdown_toggle' ) );



/*
				// Button clicks should be handled exclusively by buttonClickHandler().
				if ( event.target.classList.contains( 'dropdown_toggle' )
					 || true === !! event.target.closest( '.dropdown_toggle' ) ) {

					return;
				}

				let dropdowns = document.getElementsByClassName( 'dropdown' );
				[ ...dropdowns ].forEach( dropdown => {

					// It this dropdown or any child was not target.
					if ( dropdown !== event.target
						&& ! dropdown.contains( event.target ) ) {

						// Close it.
						dropdownPlugin.close( dropdown.querySelector( '.dropdown_toggle' ) );

					// Check for locked ancestor.
					} else if ( dropdown === event.target ) {

						// Lock this dropdown tree.
						let ancestorToggle = dropdown.closest( '.dropdown-hover' ).querySelector( '.dropdown_toggle' );
						if ( ! ancestorToggle.hasAttribute('data-click-lock')
						     || ancestorToggle.dataset.clickLock === 'false' ) {

							ancestorToggle.setAttribute( 'data-click-lock', 'true');

						}
					}
				} );

*/

		},


		/**
		 * Dropdown Hover Event Handler.
		 * 
		 * This function should be passed with event listeners.
		 */
		hoverHandler: function( event ) {

			// event.target returns null when assigned to a var!

			if ( event.type === 'mouseenter' ) {

				dropdownPlugin.open( event.target.querySelector( '.dropdown_toggle' ) );

			} else if ( event.type === 'mouseleave' ) {

				let buttonHierarchy = event.target.getElementsByClassName( 'dropdown_toggle-active' );
				[ ...buttonHierarchy ].forEach( button => {

					/**
					 * If this and all ancestors are NOT locked.
					 * 
					 * First condition makes sure the top ancestor hover toggle isn't locked. If it
					 * is, we don't want the children to close on mouseleave.
					 */
					if ( false === !! button.closest( '.dropdown-hover' ).querySelector( '[data-click-lock="true"]' ) 
						&& ( ! button.hasAttribute('data-click-lock')
						|| button.dataset.clickLock === 'false' ) ) {

						// close it.
						dropdownPlugin.close( button );
					}

				} );
			}
		},


		/**
		 * Register hover event listeners.
		 * 
		 * Attach hover event listeners to a dropdown element.
		 */
		 registerHover: function( dropdown ) {

			dropdown.addEventListener( 'mouseenter', dropdownPlugin.hoverHandler );
			dropdown.addEventListener( 'mouseleave', dropdownPlugin.hoverHandler );

			if ( ! dropdown.hasAttribute('data-hover-listener') ) {
				dropdown.setAttribute( 'data-hover-listener', 'true');
			} else {
				dropdown.dataset.hoverListener = 'true';
			}
		},

		/**
		 * Deregister hover event listeners.
		 * 
		 * Useful for when the hover functionality is no longer required. Does not affect the click
		 * listener which should never be removed.
		 */
		deregisterHover: function( dropdown ) {

			dropdown.removeEventListener( 'mouseenter', dropdownPlugin.hoverHandler );
			dropdown.removeEventListener( 'mouseleave', dropdownPlugin.hoverHandler );
			dropdown.dataset.hoverListener = 'false';
		},


		/**
		 * Handle clicks on the entire dropdown element.
		 */
		 dropdownClickHandler: function() {

			return function checkMyDropdownClick( event ) {

			}
		 },


        /**
         * Toggle the dropdown menu.
         */
		buttonClickHandler: function( button ) {


console.log( '#### buttonClickHandler: ' + button.innerText )




            // Get current state of button.
            let aria_exp = button.getAttribute( "aria-expanded" );

            // If inactive.
            if ( 'false' === aria_exp ) {

console.log('#### buttonClickHandler - inactive. ####');

				// Open it.
				dropdownPlugin.open( button );
				//button.parentElement.addEventListener( 'mouseleave', dropdownPlugin.hoverHandler );

			// If active, hover-enabled and unlocked.
            } else if ( button.parentElement.classList.contains( 'dropdown-hover' )
				        && ( ! button.hasAttribute('data-click-lock')
				        || button.dataset.clickLock === 'false' ) ) {

console.log('#### buttonClickHandler - active, hover-enabled and unlocked. ####');

				// Lock it open (until clicked again).
				button.setAttribute( 'data-click-lock', 'true');

			// If active, hover-enabled and locked.
			// Only hover-enabled elem will have 'data-click-lock', so no need to check for class.
			} else if ( button.parentElement.classList.contains( 'dropdown-hover' )
				        && button.hasAttribute('data-click-lock')
				        && button.dataset.clickLock === 'true' ) {

console.log('#### buttonClickHandler - active, hover-enabled and locked. ####');

				// Unlock and close it.
				button.dataset.clickLock = 'false';
                dropdownPlugin.close( button );

			// This should leave active and not top-level (which should never be locked directly).
            } else {

console.log('#### buttonClickHandler - active and not hover-enabled. ####');

				dropdownPlugin.close( button );
			}
        },

        /**
         * Open the menu.
         */
		 open: function( button ) {

console.log( 'open: ' + button.parentElement.firstElementChild.innerText )

			const dropdown = button.parentElement;
			let menu       = dropdown.lastElementChild;
			// Set dropdown swing direction.
			//if ( isInLeftHalf( dropdown ) ) {
			//    dropdown.classList.add( 'dropdown-swingRight' );
			//    dropdown.classList.remove( 'dropdown-swingLeft' );
			//} else {
				dropdown.classList.add( 'dropdown-swingLeft' );
			//    dropdown.classList.remove( 'dropdown-swingRight' );
			//}

			//set attributes
			button.classList.add( "dropdown_toggle-active" );
			button.setAttribute( "aria-expanded", true );
			button.setAttribute( "aria-pressed", true );

			// Now browser has calculcated layout, adjust y-scroll if required,
			scrollIntoView( menu );
        },

        /**
         * Close the menu.
         */
        close: function( button ) {






			// Unlock this dropdown tree.
			let ancestorToggle = button.parentElement.closest( '.dropdown-hover' ).querySelector( '.dropdown_toggle' );
			if ( ancestorToggle.hasAttribute('data-click-lock')
				 && ancestorToggle.dataset.clickLock === 'true' ) {

				ancestorToggle.setAttribute( 'data-click-lock', 'false');

				console.log( 'close & Unlock: ' + button.parentElement.firstElementChild.innerText );

			} else {
				console.log( 'close: ' + button.parentElement.firstElementChild.innerText );
			}





			// If the button's dropdown also has active children.
			activeChildren = button.parentElement.querySelectorAll( '.dropdown_toggle-active' );
			if ( activeChildren.length > 1 ) {
				activeChildren.forEach( childButton => {
					childButton.classList.remove( "dropdown_toggle-active" );
					childButton.setAttribute( "aria-expanded", false );
					childButton.setAttribute( "aria-pressed", false );
				} );

			} else {
				button.classList.remove( "dropdown_toggle-active" );
				button.setAttribute( "aria-expanded", false );
				button.setAttribute( "aria-pressed", false );
			}

        },


    };/* public functions */
    
})();/* plugin end */