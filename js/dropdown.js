/**
 * Toecaps Dropdown Menu Javascript
 *
 * A function to hide the header and reveal by button click. Mainly for use on
 * landing pages where the main header isn't required.
 * 
 * @package Toecaps
 * @author Jefferson Real <me@jeffersonreal.uk>
 * @copyright Copyright (c) 2022, Jefferson Real
 */

const dropdownPlugin = (function() {

	/**
	 * Abort controller for page click listeners generated by the dropdown toggling.
	 * This method is 1000x more robust than removeEventListener.
	 */
	const pageClickController = new AbortController();

    /**
     * Attach event listener to buttons in the loaded doc.
     */
    function initDropdowns() {

		// listen for page clicks.
		document.addEventListener(
			'click',
			dropdownPlugin.clickHandler(),
			{ signal: pageClickController.signal } // Nuke: pageClickController.abort();
		);

		let hoverDropdowns = document.querySelectorAll( '.dropdown-hover:not( .fullscreenMenu .dropdown )' );
		[ ...hoverDropdowns ].forEach( dropdown => {

			dropdownPlugin.registerHover( dropdown );
        } );

        let buttons = document.getElementsByClassName( 'dropdown_toggle' );

        [ ...buttons ].forEach( button => {
            button.addEventListener( 'click', buttonClicked = function() {
				dropdownPlugin.toggle( this );
            } );
        });
    }

    /**
     * Call init function on document ready.
     */
    let docLoaded = setInterval( function() {

        if( document.readyState === 'complete' ) {
            clearInterval( docLoaded );
            initDropdowns();
        }
    }, 100);


    /**
     * Check if passed elem is in left half of viewport.
     */
    function isInLeftHalf( button ) {

        const dims = button.getBoundingClientRect();
        viewportWidth = window.innerWidth;

        return (
            dims.left <= viewportWidth / 2
        );
    }


    /**
     * Check if passed elem is overflowing viewport bottom and scroll window if needed.
     */
    function scrollIntoView( menu ) {
        const menuStyles = menu.getBoundingClientRect();
		const bodyStyles = document.body.getBoundingClientRect();
        viewportHeight   = window.innerHeight;

		if ( menuStyles.bottom > viewportHeight ) {
			const scrollDistance = menuStyles.bottom - viewportHeight;
			window.scrollBy( 0, scrollDistance ); // x,y

			if ( menuStyles.bottom > bodyStyles.bottom ) {
				document.body.style.height = document.documentElement.scrollHeight + scrollDistance + 'px';
			}

		} else {
			return false;
		}
    }


    return { // Public functions.


        /**
         * Handle non-element click events.
         */
		clickHandler: function() {

			return function checkMyClick( event ) {
				let buttons = document.getElementsByClassName( 'dropdown_toggle' );

				[ ...buttons ].forEach( button => {
					if ( button.parentElement !== event.target
						&& ! button.parentElement.contains( event.target ) ) {

						// If a hover listener was removed, attach a new one.
						if ( button.parentElement.dataset.hoverListener === 'false'
							&& button.parentElement.classList.contains( 'dropdown-hover' ) ) {

console.log( '#### data attr false + dropdown-hover');
console.log( button );


							dropdownPlugin.registerHover( button.parentElement );
						}

						// This dropdown was not clicked, so close it.
						dropdownPlugin.close( button );



					} else if ( button.parentElement === event.target
						|| button.parentElement.contains( event.target ) ) {

						// This dropdown was clicked. Remove hover listeners, so the dropdown
						// doesn't close until the user clicks off it.
						dropdownPlugin.deregisterHover( button.parentElement );

					}
				} );
			}
		},


		/**
		 * Dropdown Hover Event Handler.
		 * 
		 * This function should be passed with event listeners.
		 */
		hoverHandler: function( event ) {

			// event.target returns null when assigned to a var!

			if ( event.type === 'mouseenter' ) {

				dropdownPlugin.open( event.target.querySelector( '.dropdown_toggle' ) );
console.log('mouseenter: open button');
			} else if ( event.type === 'mouseleave' ) {

				let buttonHierarchy = event.target.getElementsByClassName( 'dropdown_toggle-active' );
				[ ...buttonHierarchy ].forEach( button => {
console.log('mouseleave: close button');
					dropdownPlugin.close( button );
				} );
			}
		},


		/**
		 * Register hover event listeners.
		 * 
		 * Attach hover event listeners to a dropdown element.
		 */
		 registerHover: function( dropdown ) {

console.log('hover listeners added');
console.log(dropdown);

			dropdown.addEventListener( 'mouseenter', dropdownPlugin.hoverHandler );
			dropdown.addEventListener( 'mouseleave', dropdownPlugin.hoverHandler );
			dropdown.dataset.hoverListener = 'true';
		},

		/**
		 * Deregister hover event listeners.
		 * 
		 * Useful for when the hover functionality is no longer required. Does not affect the click
		 * listener which should never be removed.
		 */
		deregisterHover: function( dropdown ) {

console.log('hover listeners removed');
console.log(dropdown);

			dropdown.removeEventListener( 'mouseenter', dropdownPlugin.hoverHandler );
			dropdown.removeEventListener( 'mouseleave', dropdownPlugin.hoverHandler );
			dropdown.dataset.hoverListener = 'false';
		},

        /**
         * Toggle the dropdown menu.
         */
		toggle: function( button ) {

            // Get current state of button.
            let aria_exp = button.getAttribute( "aria-expanded" );

            // If inactive.
            if ( 'false' === aria_exp ) {

				// Make it active.
				dropdownPlugin.open( button );

            } else {

				// Else, make it inactive.
                dropdownPlugin.close( button );
            }
        },

        /**
         * Open the menu.
         */
		 open: function( button ) {

			const dropdown = button.parentElement;
			let menu       = dropdown.lastElementChild;
			// Set dropdown swing direction.
			//if ( isInLeftHalf( dropdown ) ) {
			//    dropdown.classList.add( 'dropdown-swingRight' );
			//    dropdown.classList.remove( 'dropdown-swingLeft' );
			//} else {
				dropdown.classList.add( 'dropdown-swingLeft' );
			//    dropdown.classList.remove( 'dropdown-swingRight' );
			//}

			//set attributes
			button.classList.add( "dropdown_toggle-active" );
			button.setAttribute( "aria-expanded", true );
			button.setAttribute( "aria-pressed", true );

			// Now browser has calculcated layout, adjust y-scroll if required,
			scrollIntoView( menu );
        },

        /**
         * Close the menu.
         */
        close: function( button ) {

console.log( 'close' )
console.log( button )


            button.classList.remove( "dropdown_toggle-active" );
            button.setAttribute( "aria-expanded", false );
            button.setAttribute( "aria-pressed", false );
        },


    };/* public functions */
    
})();/* plugin end */